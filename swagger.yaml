openapi: 3.0.0
info:
  title: Issue Tracker API
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /auth/signup:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: JWT Token

  /me:
    get:
      summary: Get current user
      responses:
        '200':
          description: Current user profile
    put:
      summary: Update current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated user

  /projects:
    get:
      summary: List all projects
      responses:
        '200':
          description: List of projects

      summary: Get all projects (paginated)
      tags:
        - Projects
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        '200':
          description: Paginated list of projects

    post:
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created

  /projects/{id}:
    put:
      summary: Update a project
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated
    delete:
      summary: Delete a project
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted

  /issues:
    get:
      summary: List all issues
      parameters:
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: assigneeId
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [open, in_progress, closed]
      responses:
        '200':
          description: List of issues

      summary: Get all issues (filtered + paginated)
      tags:
        - Issues
      parameters:
        - in: query
          name: projectId
          schema:
            type: integer
          description: Filter by project ID
        - in: query
          name: assigneeId
          schema:
            type: integer
          description: Filter by assignee ID
        - in: query
          name: status
          schema:
            type: string
            enum: [open, in_progress, closed]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated list of issues
    post:
      summary: Create an issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '201':
          description: Issue created

  /issues/{id}:
    put:
      summary: Update an issue
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '200':
          description: Issue updated
    delete:
      summary: Delete an issue
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Issue deleted

  /issues/{id}/comments:
    get:
      summary: List comments for an issue
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments
    post:
      summary: Add comment to issue
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added

components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string

    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    Project:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    Issue:
      type: object
      required:
        - title
        - projectId
        - status
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [open, in_progress, closed]
        assigneeId:
          type: string
        projectId:
          type: string

    Comment:
      type: object
      required:
        - content
      properties:
        content:
          type: string